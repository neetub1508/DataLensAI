name: Comprehensive Containerized Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  containerized-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Run Containerized Unit Tests
      run: |
        cd platform
        ./test-runner-containerized.sh --unit
        
    - name: Run Containerized Integration Tests
      run: |
        cd platform
        ./test-runner-containerized.sh --integration
        
    - name: Run Containerized E2E Tests
      run: |
        cd platform
        ./test-runner-containerized.sh --e2e
        
    - name: Upload Test Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: containerized-test-reports
        path: |
          platform/test-reports/
          
    - name: Cleanup Test Containers
      if: always()
      run: |
        cd platform
        docker-compose -f docker-compose.test.yml -p datalens-test down --volumes --remove-orphans
  
  legacy-backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: datalens_ai_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run Backend Unit Tests
      working-directory: ./platform/backend
      run: |
        mvn clean test -Dspring.profiles.active=test
        
    - name: Run Backend Integration Tests
      working-directory: ./platform/backend
      run: |
        mvn clean verify -Dspring.profiles.active=test
        
    - name: Generate Test Report
      working-directory: ./platform/backend
      run: |
        mvn jacoco:report
        
    - name: Upload Backend Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          platform/backend/target/surefire-reports/
          platform/backend/target/failsafe-reports/
          platform/backend/target/site/jacoco/
          
    - name: Comment Test Coverage
      if: github.event_name == 'pull_request'
      uses: madrapps/jacoco-report@v1.6.1
      with:
        paths: platform/backend/target/site/jacoco/jacoco.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        min-coverage-overall: 70
        min-coverage-changed-files: 80

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: platform/frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./platform/frontend
      run: npm ci
      
    - name: Run TypeScript checks
      working-directory: ./platform/frontend
      run: npm run type-check
      
    - name: Run ESLint
      working-directory: ./platform/frontend
      run: npm run lint
      
    - name: Run Unit Tests
      working-directory: ./platform/frontend
      run: npm run test:ci
      
    - name: Upload Frontend Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          platform/frontend/coverage/
          platform/frontend/test-results/
          
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: platform/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: platform/frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./platform/frontend
      run: npm ci
      
    - name: Install Playwright Browsers
      working-directory: ./platform/frontend
      run: npx playwright install --with-deps
      
    - name: Set up JDK 17 for Backend
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Start Test Environment
      run: |
        cd platform
        docker-compose -f docker-compose.test.yml up -d postgres-test redis-test
        sleep 10
        
    - name: Build and Start Backend
      working-directory: ./platform/backend
      run: |
        mvn clean package -DskipTests -Dspring.profiles.active=test
        java -jar target/*.jar --spring.profiles.active=test &
        sleep 30
      env:
        DATABASE_URL: jdbc:postgresql://localhost:5434/datalens_ai_test
        DATABASE_USERNAME: postgres
        DATABASE_PASSWORD: testpassword
        
    - name: Build and Start Frontend
      working-directory: ./platform/frontend
      run: |
        npm run build
        npm start &
        sleep 10
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        
    - name: Run E2E Tests
      working-directory: ./platform/frontend
      run: npx playwright test
      
    - name: Upload E2E Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          platform/frontend/playwright-report/
          platform/frontend/test-results/
          
    - name: Stop Test Environment
      if: always()
      run: |
        cd platform
        docker-compose -f docker-compose.test.yml down

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'DataLensAI'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 8
          
    - name: Upload Security Scan Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: reports/
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: reports/dependency-check-report.sarif

  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Environment
      run: |
        cd platform
        docker-compose up -d --build
        sleep 60
        
    - name: Run Performance Tests with k6
      uses: grafana/k6-action@v0.3.1
      with:
        filename: platform/tests/performance/load-test.js
        flags: --out json=performance-results.json
        
    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: performance-results.json
        
    - name: Stop Docker Environment
      if: always()
      run: |
        cd platform
        docker-compose down

  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-scan]
    if: always()
    
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v3
      
    - name: Create Test Summary
      run: |
        echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Backend Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check the artifacts for detailed reports." >> $GITHUB_STEP_SUMMARY