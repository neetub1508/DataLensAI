spring:
  application:
    name: datalens-backend
    version: 0.1.0
  
  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5433/datalensai
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      leak-detection-threshold: 60000
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
          fetch_size: 50
    open-in-view: false
  
  # Flyway Configuration
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    schemas: public
  
  # Redis Configuration
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  # Security Configuration
  security:
    jwt:
      secret-key: ${JWT_SECRET:your-super-secret-key-change-this-in-production}
      expiration: 86400000  # 24 hours in milliseconds
      refresh-expiration: 604800000  # 7 days in milliseconds
  
  # Actuator Configuration  
  management:
    endpoints:
      web:
        exposure:
          include: health,info,metrics
    endpoint:
      health:
        show-details: always
  
  # Profile Configuration
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}

# Server Configuration
server:
  port: 8000
  servlet:
    context-path: /api/v1
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
  http2:
    enabled: true

# Logging Configuration
logging:
  level:
    ai.datalens: DEBUG
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# Application Configuration
app:
  name: Data Lens AI
  version: 0.1.0
  description: Modern analytics platform with AI-driven insights
  cors:
    allowed-origins: 
      - http://localhost:3000
      - http://localhost:8080
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
  oauth2:
    authorized-redirect-uri: http://localhost:3000/auth/callback
  
  # Email Configuration
  mail:
    from: noreply@datalens.ai
    from-name: Data Lens AI
    verification-url: http://localhost:3000/verify-email
    reset-password-url: http://localhost:3000/reset-password
  
  # Rate Limiting
  rate-limit:
    requests-per-minute: 60
    requests-per-hour: 1000

# Snowflake Configuration
snowflake:
  url: ${SNOWFLAKE_URL:}
  user: ${SNOWFLAKE_USER:}
  password: ${SNOWFLAKE_PASSWORD:}
  database: ${SNOWFLAKE_DATABASE:}
  schema: ${SNOWFLAKE_SCHEMA:PUBLIC}
  warehouse: ${SNOWFLAKE_WAREHOUSE:COMPUTE_WH}
  role: ${SNOWFLAKE_ROLE:}
  driver: ${SNOWFLAKE_DRIVER:net.snowflake.client.jdbc.SnowflakeDriver}
  connection-timeout: ${SNOWFLAKE_CONNECTION_TIMEOUT:60000}
  network-timeout: ${SNOWFLAKE_NETWORK_TIMEOUT:300000}
  query-timeout: ${SNOWFLAKE_QUERY_TIMEOUT:300000}
  login-timeout: ${SNOWFLAKE_LOGIN_TIMEOUT:60000}
  ssl: ${SNOWFLAKE_SSL:on}
  validate-default-parameters: ${SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS:true}
  max-pool-size: ${SNOWFLAKE_MAX_POOL_SIZE:10}
  min-pool-size: ${SNOWFLAKE_MIN_POOL_SIZE:2}
  initial-pool-size: ${SNOWFLAKE_INITIAL_POOL_SIZE:2}
  application: ${SNOWFLAKE_APPLICATION:DataLensAI}

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
  
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: validate
  
  h2:
    console:
      enabled: false

logging:
  level:
    root: INFO
    ai.datalens: DEBUG

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test
  
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect
  
  flyway:
    enabled: false

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker
  
  datasource:
    url: jdbc:postgresql://postgres:5432/datalensai
    username: postgres
    password: postgres
  
  data:
    redis:
      host: redis
      port: 6379
  
  jpa:
    show-sql: false
    hibernate:
      ddl-auto: validate

logging:
  level:
    root: INFO
    ai.datalens: DEBUG

app:
  cors:
    allowed-origins: 
      - http://localhost:3000
      - http://frontend:3000

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  
  jpa:
    show-sql: false
    hibernate:
      ddl-auto: validate
  
logging:
  level:
    root: WARN
    ai.datalens: INFO
  file:
    name: logs/datalens-backend.log