services:
  # Test Database Services
  postgres-test:
    image: postgres:15-alpine
    container_name: datalens-postgres-test
    environment:
      POSTGRES_DB: datalens_ai_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: testpassword
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5434:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d/:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d datalens_ai_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  redis-test:
    image: redis:7-alpine
    container_name: datalens-redis-test
    ports:
      - "6380:6379"
    command: redis-server --requirepass testpassword
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Backend Test Container
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
    container_name: datalens-backend-test
    environment:
      - SPRING_PROFILES_ACTIVE=test
      - DATABASE_URL=jdbc:postgresql://postgres-test:5432/datalens_ai_test
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=testpassword
      - REDIS_HOST=redis-test
      - REDIS_PASSWORD=testpassword
      - JWT_SECRET=test-secret-key-for-testing-purposes-only
    volumes:
      - ./backend:/app:ro
      - backend_test_reports:/app/target
      - maven_cache:/home/appuser/.m2
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - test-network
    command: >
      bash -c "
        echo 'Waiting for dependencies...' &&
        sleep 10 &&
        echo 'Running backend tests...' &&
        mkdir -p /home/appuser/.m2/repository &&
        chown -R appuser:appuser /home/appuser/.m2 &&
        rm -rf target/* 2>/dev/null || true &&
        sudo -u appuser env JAVA_HOME=/opt/java/openjdk MAVEN_HOME=/opt/maven PATH=/opt/java/openjdk/bin:/opt/maven/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin mvn test -Dtest='BasicContainerizedTest' -Djacoco.skip=true -DfailIfNoTests=false --batch-mode --quiet
      "

  # Frontend Test Container
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile.test
    container_name: datalens-frontend-test
    environment:
      - NODE_ENV=test
      - CI=true
    volumes:
      - ./frontend:/app:ro
      - frontend_test_reports:/app/coverage
      - frontend_node_modules:/app/node_modules
    networks:
      - test-network
    command: >
      sh -c "
        echo 'Installing dependencies...' &&
        npm ci &&
        echo 'Running frontend tests...' &&
        npm run test:ci
      "

  # Integration Test Container
  integration-test:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
    container_name: datalens-integration-test
    environment:
      - SPRING_PROFILES_ACTIVE=test
      - DATABASE_URL=jdbc:postgresql://postgres-test:5432/datalens_ai_test
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=testpassword
      - REDIS_HOST=redis-test
      - REDIS_PASSWORD=testpassword
    volumes:
      - ./backend:/app:ro
      - integration_test_reports:/app/target
      - maven_cache:/home/appuser/.m2
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - test-network
    command: >
      bash -c "
        echo 'Waiting for dependencies...' &&
        sleep 15 &&
        echo 'Running integration tests...' &&
        mkdir -p /home/appuser/.m2/repository &&
        chown -R appuser:appuser /home/appuser/.m2 &&
        rm -rf target/* 2>/dev/null || true &&
        sudo -u appuser env JAVA_HOME=/opt/java/openjdk MAVEN_HOME=/opt/maven PATH=/opt/java/openjdk/bin:/opt/maven/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin mvn test -Dtest='*IntegrationTest' -DfailIfNoTests=false -Djacoco.skip=true --batch-mode --quiet
      "

  # E2E Test Container
  e2e-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile.e2e
    container_name: datalens-e2e-test
    environment:
      - NODE_ENV=test
      - BASE_URL=http://frontend-app:3000
      - API_URL=http://backend-app:8000
    volumes:
      - ./frontend:/app:ro
      - e2e_test_reports:/app/playwright-report
      - e2e_test_results:/app/test-results
    depends_on:
      - backend-app
      - frontend-app
    networks:
      - test-network
    command: >
      sh -c "
        echo 'Installing dependencies...' &&
        npm ci &&
        echo 'Installing Playwright browsers...' &&
        npx playwright install --with-deps &&
        echo 'Waiting for application to be ready...' &&
        sleep 30 &&
        echo 'Running E2E tests...' &&
        npx playwright test
      "

  # Application Services for E2E Testing
  backend-app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: datalens-backend-app-test
    environment:
      - SPRING_PROFILES_ACTIVE=test
      - DATABASE_URL=jdbc:postgresql://postgres-test:5432/datalens_ai_test
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=testpassword
      - REDIS_HOST=redis-test
      - REDIS_PASSWORD=testpassword
    ports:
      - "8001:8000"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  frontend-app:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: datalens-frontend-app-test
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8001
    ports:
      - "3001:3000"
    depends_on:
      - backend-app
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Performance Test Container
  performance-test:
    image: grafana/k6:latest
    container_name: datalens-performance-test
    volumes:
      - ./tests/performance:/scripts:ro
      - performance_test_reports:/results
    depends_on:
      - backend-app
      - frontend-app
    networks:
      - test-network
    command: >
      sh -c "
        echo 'Waiting for application to be ready...' &&
        sleep 45 &&
        echo 'Running performance tests...' &&
        k6 run --out json=/results/performance-results.json /scripts/load-test.js
      "

  # Security Test Container
  security-test:
    image: owasp/dependency-check:latest
    container_name: datalens-security-test
    volumes:
      - .:/src:ro
      - security_test_reports:/reports
    networks:
      - test-network
    command: >
      sh -c "
        echo 'Running security scan...' &&
        /usr/share/dependency-check/bin/dependency-check.sh 
        --project DataLensAI 
        --scan /src 
        --format ALL 
        --out /reports 
        --enableRetired 
        --enableExperimental || echo 'Security scan completed with warnings'
      "

  # Test Report Collector
  test-reports:
    image: alpine:latest
    container_name: datalens-test-reports
    volumes:
      - backend_test_reports:/reports/backend:ro
      - frontend_test_reports:/reports/frontend:ro
      - integration_test_reports:/reports/integration:ro
      - e2e_test_reports:/reports/e2e:ro
      - e2e_test_results:/reports/e2e-results:ro
      - performance_test_reports:/reports/performance:ro
      - security_test_reports:/reports/security:ro
      - ./test-reports:/output
    networks:
      - test-network
    command: >
      sh -c "
        echo 'Collecting test reports...' &&
        apk add --no-cache rsync &&
        mkdir -p /output/$(date +%Y%m%d_%H%M%S) &&
        REPORT_DIR=/output/$(date +%Y%m%d_%H%M%S) &&
        rsync -av /reports/ $$REPORT_DIR/ 2>/dev/null || cp -r /reports/* $$REPORT_DIR/ 2>/dev/null || echo 'Some reports may be missing' &&
        echo 'Test reports collected in: '$$REPORT_DIR &&
        ls -la $$REPORT_DIR
      "

volumes:
  postgres_test_data:
  backend_test_reports:
  frontend_test_reports:
  integration_test_reports:
  e2e_test_reports:
  e2e_test_results:
  performance_test_reports:
  security_test_reports:
  maven_cache:
  frontend_node_modules:

networks:
  test-network:
    driver: bridge