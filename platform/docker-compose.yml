services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: datalensai
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --auth-local=trust"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d datalensai"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - datalens_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - datalens_network
    restart: unless-stopped

  # Database Migration Service
  db-migrate:
    image: postgres:15-alpine
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: datalensai
      DB_USER: postgres
      DB_PASSWORD: postgres
      PGPASSWORD: postgres
    volumes:
      - ./database:/database:ro
    networks:
      - datalens_network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Running database migrations...'
        apk add --no-cache postgresql-client
        cd /database
        chmod +x ./migrate.sh
        ./migrate.sh --with-seeds
        echo 'Migration completed'
      "
    restart: "no"

  # Backend API (Java Spring Boot)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/datalensai
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_SECURITY_JWT_SECRET_KEY=your-super-secret-key-change-this-in-production-minimum-256-bits
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - APP_CORS_ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
      - JAVA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Dspring.profiles.active=docker
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    networks:
      - datalens_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NODE_ENV=development
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - datalens_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  datalens_network:
    driver: bridge
    name: datalens_network